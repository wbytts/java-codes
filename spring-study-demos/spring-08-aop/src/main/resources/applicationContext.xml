<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tool="http://www.springframework.org/schema/tool"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd"
>


    <bean id="userService" class="com.by.service.UserServiceImpl" />
    <bean id="userService2" class="com.by.service.UserServiceImpl2" />
    <bean id="userService3" class="com.by.service.UserServiceImpl3" />
    <bean id="beforeLog" class="com.by.log.BeforeLog" />
    <bean id="afterLog" class="com.by.log.AfterLog" />
    <bean id="diyPointCut" class="com.by.diy.DiyPointCut" />
    <bean id="annotationPointCut" class="com.by.aop.AnnotationPointCut" />

    <!-- 开启AOP的注解支持 -->
    <!--
        proxy-target-class：默认是
    -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

    <!-- 配置AOP -->
    <!-- 方式一：使用原生的 Spring API 接口 -->
    <aop:config>
        <!--
            定义切入点:
                 expression：表达式   execution(要执行的位置! * * * * *)
             execution表达式分为五部分：
                1. execution 表达式主体
                2. 返回类型，* 表示所有类型
                3. 包：
                4. 类：
                5. 方法： * 表示所有方法，  (..)  两个点表示任何参数
        -->
        <aop:pointcut id="pc1" expression="execution(* com.by.service.UserServiceImpl.*(..))"/>
        <!--
            增加 通知
        -->
        <aop:advisor advice-ref="afterLog" pointcut-ref="pc1" />
        <aop:advisor advice-ref="beforeLog" pointcut-ref="pc1" />
    </aop:config>

    <!-- 方式二：使用自定义类 -->
    <aop:config>
        <!-- 自定义切面 ref：要引用的类 -->
        <aop:aspect ref="diyPointCut">
            <!-- 切入点 -->
            <aop:pointcut id="pc2" expression="execution(* com.by.service.UserServiceImpl2.*(..))"/>
            <!-- 通知 -->
            <aop:before method="before" pointcut-ref="pc2" />
            <aop:after method="after" pointcut-ref="pc2" />
        </aop:aspect>
    </aop:config>

</beans>